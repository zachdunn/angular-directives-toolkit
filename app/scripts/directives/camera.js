// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  angular.module('angularToolkitApp').directive('ngCamera', function() {
    return {
      require: 'ngModel',
      template: '<div class="ng-camera clearfix">\
    <p ng-hide="isLoaded">Loading Camera...</p>\
    <div class="ng-camera-stack" ng-hide="!isLoaded">\
      <img class="ng-camera-overlay" ng-src="{{overlaySrc}}" width="{{width}}" height="{{height}}">\
      <video id="ng-camera-feed" autoplay width="{{width}}" height="{{height}}" src="{{videoStream}}">Install Browser\'s latest version</video>\
      <canvas id="ng-photo-canvas" width="{{width}}" height="{{height}}" style="display:none;"></canvas>\
    </div>\
    <div class="row ng-camera-controls" ng-hide="!isLoaded">\
      <button class="btn ng-camera-take-btn" ng-click="takePicture()">Take Picture</button>\
      <button class="btn ng-camera-publish-btn" ng-click="publishCallback()">Publish</button>\
    </div>\
  </div>',
      replace: true,
      transclude: true,
      restrict: 'E',
      scope: {
        type: '@',
        media: '=ngModel',
        width: '@',
        height: '@',
        overlaySrc: '=',
        publishCallback: '&publish'
      },
      link: function($scope, element, $attrs, ngModel) {
        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
        window.URL = window.URL || window.webkitURL || window.mozURL || window.msURL;
        $scope.$watch('overlaySrc', function(newVal, oldVal) {
          var preloader;
          if ($scope.overlaySrc != null) {
            $scope.isLoaded = false;
            preloader = new Image();
            preloader.crossOrigin = '';
            preloader.src = newVal;
            return preloader.onload = function() {
              return $scope.$apply(function() {
                return $scope.isLoaded = true;
              });
            };
          } else {
            return $scope.isLoaded = true;
          }
        });
        $scope.enableCamera = function() {
          return navigator.getUserMedia({
            audio: false,
            video: true
          }, function(stream) {
            return $scope.$apply(function() {
              return $scope.videoStream = window.URL.createObjectURL(stream);
            });
          });
        };
        $scope.disableCamera = function() {
          return navigator.getUserMedia({
            audio: false,
            video: true
          }, function(stream) {
            return $scope.$apply(function() {
              return $scope.videoStream = "";
            });
          });
        };
        $scope.takePicture = function() {
          var canvas, context;
          canvas = angular.element('#ng-photo-canvas')[0];
          if (canvas != null) {
            context = canvas.getContext('2d');
            context.drawImage(angular.element('#ng-camera-feed')[0], 0, 0, 640, 480);
            if ($scope.overlaySrc != null) {
              return $scope.addFrame(context, $scope.overlaySrc, function(image) {
                return $scope.$apply(function() {
                  return $scope.media = canvas.toDataURL();
                });
              });
            } else {
              return $scope.media = canvas.toDataURL();
            }
          }
        };
        $scope.addFrame = function(context, url, callback) {
          var overlay;
          if (callback == null) {
            callback = false;
          }
          overlay = new Image();
          overlay.crossOrigin = '';
          overlay.src = url;
          return overlay.onload = function() {
            console.log('Loaded');
            context.drawImage(overlay, 0, 0, 640, 480);
            if (callback) {
              return callback(context);
            }
          };
        };
        $scope.$watch('media', function(newVal) {
          if (newVal != null) {
            return $scope.packagedMedia = $scope.media.replace(/^data:image\/\w+;base64,/, "");
          }
        });
        return $scope.$watch('type', function() {
          switch ($scope.type) {
            case 'photo':
              console.log('Camera type: Photo');
              return $scope.enableCamera();
            case 'gif':
              return console.log('Camera type: GIF');
            case 'video':
              return console.log('Camera type: Video');
            default:
              console.log('Camera type: Defaulting to photo');
              return $scope.enableCamera();
          }
        });
      }
    };
  });

}).call(this);
